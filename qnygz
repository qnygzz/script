-- Qnygz v2 - Key + HWID verifier (per-executor HWID file)
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- ===== CONFIG =====
local VERIFY_URL = "https://replit.com/@kamilpc2012/roblox/verify" -- your provided URL (replace if needed)

-- base filename (we will append executor id)
local HWID_FILE_BASE = "qnygz_hwid"

-- ===== Helpers =====
local function safe_call(fn, ...)
    if type(fn) ~= "function" then return nil end
    local ok, res = pcall(fn, ...)
    if ok then return res end
    return nil
end

-- Attempt to detect executor id/name using common funcs
local function detect_executor_id()
    local candidate = nil

    candidate = candidate or safe_call(function() return _G and _G.identifyexecutor and _G.identifyexecutor() end)
    candidate = candidate or safe_call(identifyexecutor)
    candidate = candidate or safe_call(getexecutor)
    candidate = candidate or (type(syn) == "table" and safe_call(function() return syn.getexecutor and syn.getexecutor() end))
    candidate = candidate or safe_call(function() if type(_G)=="table" and _G.get_executor then return _G.get_executor() end end)

    if type(candidate) == "table" then
        local s = ""
        for k,v in pairs(candidate) do s = s .. tostring(k) .. "=" .. tostring(v) .. ";" end
        candidate = s
    end

    if type(candidate) == "string" and #candidate > 0 then
        return candidate
    end

    return "generic"
end

-- sanitize a string to be safe for filenames
local function sanitize_filename(s)
    s = tostring(s):gsub("[^%w%-_]", "") -- keep letters, numbers, dash, underscore
    if s == "" then s = "unknown" end
    return s
end

-- persistent HWID per-executor: choose filename that includes executor id
local function loadOrCreateHWID()
    local executor_id = detect_executor_id()
    local safe_exec = sanitize_filename(executor_id)
    local HWID_FILE = HWID_FILE_BASE .. "_" .. safe_exec .. ".txt"

    local isfile_f = isfile
    local readfile_f = readfile
    local writefile_f = writefile

    if type(isfile_f) == "function" and type(readfile_f) == "function" and type(writefile_f) == "function" then
        local ok, exists = pcall(isfile_f, HWID_FILE)
        if ok and exists then
            local ok2, stored = pcall(readfile_f, HWID_FILE)
            if ok2 and stored and #stored > 0 then
                return stored
            end
        end

        local newhwid = tostring(LocalPlayer.UserId) .. "-" .. safe_exec .. "-" .. HttpService:GenerateGUID(false)
        pcall(writefile_f, HWID_FILE, newhwid)
        return newhwid
    else
        return tostring(LocalPlayer.UserId) .. "-" .. safe_exec .. "-" .. HttpService:GenerateGUID(false)
    end
end

local function postVerify(key, hwid)
    local payload = HttpService:JSONEncode({ key = key, hwid = hwid })
    local ok, res = pcall(function()
        return HttpService:PostAsync(VERIFY_URL, payload, Enum.HttpContentType.ApplicationJson)
    end)
    if not ok then
        return false, "Could not contact verify server (network/HttpService error)"
    end

    local decoded
    local ok2, err = pcall(function() decoded = HttpService:JSONDecode(res) end)
    if not ok2 then
        return false, "Invalid response from server"
    end

    return true, decoded
end

-- ===== Main =====
if not getgenv().key or #tostring(getgenv().key) < 1 then
    warn("Qnygz: No key detected in getgenv().key. Paste your key or use the bot 'Get Script' button.")
    return
end

local key = tostring(getgenv().key)
local hwid = loadOrCreateHWID()

print(("Qnygz: Verifying key %s with HWID %s"):format(key, hwid))

local ok, resultOrMsg = postVerify(key, hwid)
if not ok then
    warn("Qnygz: "..tostring(resultOrMsg))
    return
end

local res = resultOrMsg
if res.success then
    print("âœ… Qnygz: Verification success - "..tostring(res.msg))
    print("ðŸš€ Qnygz executor running")
else
    local msg = tostring(res.msg or "Verification failed")
    if msg:lower():find("hwid") or msg:lower():find("mismatch") or msg:lower():find("locked") then
        local kickMsg = "HWID is linked to another executor â€” " .. msg
        pcall(function() LocalPlayer:Kick(kickMsg) end)
    else
        pcall(function() LocalPlayer:Kick(msg) end)
    end
end
